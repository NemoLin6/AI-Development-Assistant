import sys
import os
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLineEdit, QTextEdit, QLabel
from PyQt5.QtGui import QFont

DEFAULT_EXCLUDE = ['node_modules', '.git', '__pycache__', 'venv', 'build', 'dist']

def generate_tree(path, exclude_dirs):
    def write_tree(path, prefix=""):
        contents = list(os.listdir(path))
        contents.sort(key=lambda x: (not os.path.isdir(os.path.join(path, x)), x.lower()))
        pointers = ["├── "] * (len(contents) - 1) + ["└── "]
        for pointer, name in zip(pointers, contents):
            if name in exclude_dirs:
                continue
            yield prefix + pointer + name
            if os.path.isdir(os.path.join(path, name)):
                extension = "│   " if pointer == "├── " else "    "
                yield from write_tree(os.path.join(path, name), prefix + extension)

    return "\n".join(write_tree(path))

class App(QWidget):
    def __init__(self):
        super().__init__()
        self.title = '目录树生成器'
        self.initUI()

    def initUI(self):
        self.setWindowTitle(self.title)
        self.setGeometry(100, 100, 600, 400)

        layout = QVBoxLayout()

        # 设置字体
        font = QFont("Microsoft YaHei", 10)
        self.setFont(font)

        # 输入路径
        input_layout = QHBoxLayout()
        self.input_path = QLineEdit(self)
        self.input_path.setPlaceholderText("请输入或粘贴目录路径")
        input_layout.addWidget(self.input_path)
        self.generate_button = QPushButton("生成目录树", self)
        self.generate_button.clicked.connect(self.generateTree)
        input_layout.addWidget(self.generate_button)
        layout.addLayout(input_layout)

        # 排除目录
        exclude_layout = QHBoxLayout()
        exclude_layout.addWidget(QLabel("排除目录（用逗号分隔）："))
        self.exclude_dirs = QLineEdit(self)
        self.exclude_dirs.setText(", ".join(DEFAULT_EXCLUDE))
        exclude_layout.addWidget(self.exclude_dirs)
        layout.addLayout(exclude_layout)

        # 输出区域
        self.output_text = QTextEdit(self)
        self.output_text.setReadOnly(True)
        layout.addWidget(self.output_text)

        self.setLayout(layout)

    def generateTree(self):
        path = self.input_path.text().strip()
        exclude_dirs = [dir.strip() for dir in self.exclude_dirs.text().split(',') if dir.strip()]

        if not path:
            self.output_text.setText("请输入有效的目录路径。")
            return

        if not os.path.exists(path):
            self.output_text.setText("指定的路径不存在。")
            return

        try:
            tree = generate_tree(path, exclude_dirs)
            self.output_text.setText(tree)
        except Exception as e:
            self.output_text.setText(f"生成目录树时发生错误：{str(e)}")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = App()
    ex.show()
    sys.exit(app.exec_())
